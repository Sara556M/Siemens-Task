const request = require('supertest');const baseURL = 'http://localhost:3000';let token = '';let updatedEmail = 'updateduser@gmail.com';let updatedPassword = 'newpass123';beforeAll(async () => {  // Clean up all users  await request(baseURL).delete('/api/v1/all-users').send({ key_admin: 'keyadmin123' });  // Register user for auth tests  await request(baseURL).post('/api/v1/users').send({    name: 'authUser',    email: 'authuser@gmail.com',    password: 'auth123',  });  const login = await request(baseURL).post('/api/v1/auth').send({    email: 'authuser@gmail.com',    password: 'auth123',  });  token = login.body.token;});describe('Auth API Tests', () => {  it('should register user successfully', async () => {    const res = await request(baseURL)      .post('/api/v1/users')      .send({        name: 'newUser',        email: 'newuser2@gmail.com',        password: 'user123',      });    expect(res.statusCode).toBe(200);    expect(res.body).toHaveProperty('message', 'User registered with success');  });  it('should fail to register user with missing fields', async () => {    const res = await request(baseURL)      .post('/api/v1/users')      .send({ email: 'user2@gmail.com' });    expect([400, 401]).toContain(res.statusCode);    expect(res.body).toHaveProperty('message');  });  it('should fail registration with invalid email', async () => {    const res = await request(baseURL)      .post('/api/v1/users')      .send({        name: 'Test',        email: 'not-an-email',        password: 'testpass',      });    expect([400, 401]).toContain(res.statusCode);    expect(res.body).toHaveProperty('message');  });  it('should fail registration with short password', async () => {    const res = await request(baseURL)      .post('/api/v1/users')      .send({        name: 'Test',        email: 'test@example.com',        password: '12',      });    expect([400, 401]).toContain(res.statusCode);    expect(res.body).toHaveProperty('message');  });  it('should authenticate and return token', async () => {    const res = await request(baseURL).post('/api/v1/auth').send({      email: 'authuser@gmail.com',      password: 'auth123',    });    expect(res.statusCode).toBe(200);    expect(res.body).toHaveProperty('token');  });  it('should fail authentication with wrong credentials', async () => {    const res = await request(baseURL).post('/api/v1/auth').send({      email: 'wrong@gmail.com',      password: 'wrongpass',    });    expect(res.statusCode).toBe(401);    expect(res.body).toHaveProperty('message', 'Incorrect email or password');  });});describe('User API Tests', () => {  it('should get user with valid token', async () => {    expect(token).toBeTruthy();    const res = await request(baseURL)      .get('/api/v1/users')      .set('Authorization', token);    expect(res.statusCode).toBe(200);    expect(res.body).toHaveProperty('email');  });  it('should update user info with valid token', async () => {    const res = await request(baseURL)      .patch('/api/v1/users')      .set('Authorization', token)      .send({        name: 'updatedUser',        email: updatedEmail,        password: updatedPassword,      });    expect(res.statusCode).toBe(200);    expect(res.body.message).toBe('User updated with success!');  });  it('should re-authenticate after update and get new token', async () => {    const res = await request(baseURL)      .post('/api/v1/auth')      .send({        email: updatedEmail,        password: updatedPassword,      });    expect(res.statusCode).toBe(200);    expect(res.body).toHaveProperty('token');    token = res.body.token; // update token for next test  });  it('should get user after re-authentication', async () => {    expect(token).toBeTruthy();    const res = await request(baseURL)      .get('/api/v1/users')      .set('Authorization', token);    expect(res.statusCode).toBe(200);    expect(res.body).toHaveProperty('email', updatedEmail);  });  it('should fail to delete all users with wrong admin key', async () => {    const res = await request(baseURL)      .delete('/api/v1/all-users')      .send({ key_admin: 'wrongkey' });    expect(res.statusCode).toBe(403);  });  it('should delete all users with correct admin key', async () => {    const res = await request(baseURL)      .delete('/api/v1/all-users')      .send({ key_admin: 'keyadmin123' });    expect(res.statusCode).toBe(200);    expect(res.body.message).toBe('Users deleted with success');  });});